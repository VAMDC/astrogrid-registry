## Astrogrid global configuration.

##########################Change#######################################################
reg.amend.authorityid=registry.test
xmldb.uri=xmldb:exist://
xmldb.driver=org.exist.xmldb.DatabaseImpl
xmldb.query.service=XQueryService
xmldb.admin.user=admin
xmldb.admin.password=
reg.amend.defaultversion=0.10
reg.amend.validate=true
reg.amend.quiton.invalid=false
reg.amend.returncount=100
reg.amend.harvest=true
reg.custom.harvest.interval_hours=2
reg.custom.keywordxpaths.0.10=vr:content/vr:description, vr:title, vr:content/vr:subject
reg.custom.keywordxpaths.1.0=identifier, content/description, title, content/subject
reg.custom.rootNode.default=vor:Resource
reg.custom.rootNode.0.10=vor:Resource
reg.custom.rootNode.0.9=vr:Resource
reg.custom.rootNode.1.0=Resource
reg.custom.declareNS.0.10=declare namespace vr = "http://www.ivoa.net/xml/VOResource/v0.10"; declare namespace vor="http://www.ivoa.net/xml/RegistryInterface/v0.1"; declare namespace vs = "http://www.ivoa.net/xml/VODataService/v0.5"; declare namespace cs = "http://www.ivoa.net/xml/ConeSearch/v0.3"; declare namespace sia = "http://www.ivoa.net/xml/SIA/v0.7"; declare namespace vg = "http://www.ivoa.net/xml/VORegistry/v0.3"; declare namespace vc = "http://www.ivoa.net/xml/VORegistry/v0.3"; declare namespace cea="http://www.ivoa.net/xml/CEAService/v0.2"; declare namespace ceapd="http://www.astrogrid.org/schema/AGParameterDefinition/v1"; declare namespace ag="http://www.astrogrid.org/schema/AstrogridDataService/v0.2"; declare namespace tdb="urn:astrogrid:schema:vo-resource-types:TabularDB:v0.3"; declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance"; 
reg.custom.declareNS.1.0=declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance"; declare namespace agr="urn:astrogrid:schema:RegistryStoreResource:v1";  declare namespace ri="http://www.ivoa.net/xml/RegistryInterface/v1.0"; 

#Quit doing an update on a validation error.
registry.quiton.invalid=false

##The maximum number Resources to be returned from a query.
exist.query.returncount=60

#current default version of this registry.
#In general if queries/updates come in with a defined VOResource namespace (either vr or default)
#the Registry will take that version instead.  This is more of a fallback version if needed.
org.astrogrid.registry.version=0_10

#This will determine if you should harvest other registries.
registry.harvest.enabled=true

reg.custom.query.singleidentifer.0.10=//<rootnode>[vr:identifier = '<id>']
reg.custom.query.singleidentifer.1.0=//<rootnode>[identifier = '<id>']
reg.custom.query.multipleidentifier.0.10=//<rootnode>[match-all(vr:identifier,'.*<id>.*')]
reg.custom.query.multipleidentifier.1.0=//<rootnode>[match-all(identifier,'.*<id>.*')]
reg.custom.query.registrytypes.0.10=//<rootnode>[matches(@xsi:type,'Registry')]
reg.custom.query.registrytypes.1.0=//<rootnode>[matches(@xsi:type,'Registry')]
reg.custom.query.registrytypewithident.0.10=//<rootnode>[@xsi:type = 'vg:Registry' and match-all(vr:identifier,'.*<id>.*')]
reg.custom.query.registrytypewithident.1.0=//<rootnode>[@xsi:type = 'vg:Registry' and match-all(identifier,'.*<id>.*')]
reg.custom.query.everything=//<rootnode>
reg.custom.query.start=for $x in //<rootnode> where
reg.custom.query.expression=__declareNS__ let $hits := (__query__) return subsequence($hits,__startCount__,__returnCount__)

#The number of hours the registry should perform a harvest.
org.astrogrid.registry.harvest.daemon.interval-hours=5

#Should change the name it does not need to be a servlet.  It is a url to the web based version
#of your OAI. In the one that comes with the registry this is a servlet. It is also okay to be 
#localhost this property is used on the web service version of the registry. Be sure to
#change the webapp name if your registry is not astrogrid-registry-SNAPSHOT.
oai.servlet.url.1_0=http://localhost:8080/astrogrid-registry-SNAPSHOT/OAIHandlerv1_0
oai.servlet.url.0_10=http://localhost:8080/astrogrid-registry-SNAPSHOT/OAIHandlerv0_10

#If your using the Astrogrid OAI implementation then these three properties are used
#in the Identify portion of a OAI request. Later implementations may be able to get these
#properties from the Registry type resource, but currently that is not implemented.
Identify.repositoryName=Astrogrid Full Repository
Identify.adminEmail=mailto:ktn@star.le.ac.uk
Identify.earliestDatestamp=1950-03-03T22:14:22
###############################################################

############################Custom#############################
#This area deals with certain defaults that you may change if desired. But normally is not
#required.

#If you desire you may define a style sheet named UpdateProcess_{versionnumber}.xsl  for 
#doing a transformation before going into the db.  This is rarely used. ex: UpdateProcess_0_9.xsl
#Place the stylesheet in the "/classes" directory for automatic pick-up or on your classpath.
#0.9 required a stylesheet because of substitution groups there was a variety of ways to express
#the xml, so Astrogrid xsl the xml if needed to a particular consistent way.
org.astrogrid.registry.updatestylesheet.0_9=true

#If you desire you may define a style sheet named UpdateProcess_Harvest_{versionnumber}.xsl  for 
#doing a transformation before going into the db from a Harvest of another registry.  Read above for 0.9 reasons
#0.10 also does not define any global top element meaning a registry could have any tag name with any namespace
#using the vr:Resource type from a harvet.  So this stylesheet always grabbs those tags and puts it correctly to
#Astrogrids vor:Resource element.
org.astrogrid.registry.updatestylesheet.onHarvest.0_10=true
org.astrogrid.registry.updatestylesheet.onHarvest.0_9=true

#decare namespaces to be used on all your queries.  This can also come in handy in your own local registry
#if you define other namespaces (xml types) that you want to query on in this registry.  Listed below are the
#default namespaces currently held in the astrogrid registry.
declare.namespace.0_9=declare namespace vr = "http://www.ivoa.net/xml/VOResource/v0.9"; declare namespace vc = "http://www.ivoa.net/xml/VOCommunity/v0.2"; declare namespace vg = "http://www.ivoa.net/xml/VORegistry/v0.2"; declare namespace vs = "http://www.ivoa.net/xml/VODataService/v0.4"; declare namespace vt = "http://www.ivoa.net/xml/VOTable/v0.1"; declare namespace cs = "http://www.ivoa.net/xml/ConeSearch/v0.2"; declare namespace sia = "http://www.ivoa.net/xml/SIA/v0.6"; declare namespace cea="http://www.ivoa.net/xml/CEAService/v0.1"; declare namespace ceapd="http://www.astrogrid.org/schema/AGParameterDefinition/v1"; declare namespace ag="http://www.astrogrid.org/schema/AstrogridDataService/v0.1"; 
declare.namespace.0_10=declare namespace vr = "http://www.ivoa.net/xml/VOResource/v0.10"; declare namespace vor="http://www.ivoa.net/xml/RegistryInterface/v0.1"; declare namespace vs = "http://www.ivoa.net/xml/VODataService/v0.5"; declare namespace cs = "http://www.ivoa.net/xml/ConeSearch/v0.3"; declare namespace sia = "http://www.ivoa.net/xml/SIA/v0.7"; declare namespace vg = "http://www.ivoa.net/xml/VORegistry/v0.3"; declare namespace vc = "http://www.ivoa.net/xml/VORegistry/v0.3"; declare namespace ag="http://www.astrogrid.org/schema/AstrogridDataService/v0.2"; 

#define the xml path comma seperated of all the elements that you wish to use on your keyword search.
keyword.query.path.0_9=vr:Summary/vr:Description, vr:Title, vr:Subject
keyword.query.path.0_10=vr:content/vr:description, vr:title, vr:content/vr:subject

#in the upcoming versions only the identifer element no authorityid will be used.
#But this defines that version 0.9 does use an authority id element inside it's identifer.
identifier.path.hasauthorityid.0_9=true

#This is the main root node that contains all the xml. Hence the parent node of the identifier
#It is not the root node that may contain the Resource elements.
reg.custom.rootNode.default=vor:Resource
reg.custom.rootNode.1.0=ri:Resource
reg.custom.rootNode.0.10=vor:Resource

#Below are OAI custom properties. Should not change. If you do not use the Astrogrid OAI
#implementation then you may delete.
#################################################################################
#################################################################################
#OAI properties for the OAI servlet based around the OAICat implementation
#Recomended to only change the Identify properties below (the last 4 properties)
#################################################################################
#OAIHandler.serviceUnavailable=[true|false] (Optional): Forces the server to return a SC_SERVICE_UNAVAILABLE code to inform the user that it is currently being worked on. 
#OAIHandler.styleSheet=[path-to-xsl-stylesheet] (Optional): If present, a reference to this XSLT stylesheet will be included in the OAI responses. 
#OAIHandler.renderForOldBrowsers=[true|false] (Optional): If present and true, the XSLT stylesheet will be applied to the OAI response on the the server before sending back the response, if the client is an old browser. This is a good idea if you've defined OAIHandler.styleSheet because some old browsers don't do a very good job of rendering XSLT on the client side. 
#OAIHandler.forceRender=[true|false] (Optional): If present and true, the XSLT stylesheet will be applied to the OAI response on the the server before sending back the response. This is useful if you want to use OAICat as a web application framework, but want to disable OAI harvesting because the data is proprietary (e.g. The GSAFD Thesaurus). 
#OAIHandler.baseURL=[OAI baseURL] (Optional): Force OAI responses to include the specified baseURL instead of getting it from the HttpServletRequest. This may be necessary if your firewall/router/port-mapper is messing with the request in some way. 
#AbstractCatalog.oaiCatalogClassName=[package.classname] (Required): The fully qualified Java class name that implements ORG.oclc.oai.server.catalog.AbstractCatalog. 
#AbstractCatalog.recordFactoryClassName=[package.classname] (Required): The fully qualified Java class name that implements ORG.oclc.oai.server.catalog.RecordFactory. 
#AbstractCatalog.secondsToLive=[# of seconds] (Optional): The number of seconds a resumptionToken is retained for reuse. The default is -1, which means that resumptionTokens are stateless and can be resent anytime. 
#AbstractCatalog.harvestable=[true|false] (Optional): If present and false, the ListRecords and ListIdentifiers verbs will send back an error condition. This might be useful if you want to provide access to the other verbs but want to discourage general harvesting. 
#AbstractCatalog.granularity=[YYYY-MM-DD|YYYY-MM-DDThh:mm:ssZ] (Required): The supported level of datetime granularity for from/until parameters. 
#Identify.repositoryName=[text] (Required): Text to use as the Identify verb's repositoryName value. 
#Identify.adminEmail[mailto:abc@xyz.org] (Required): Text to use as the Identify verb's adminEmail value. 
#Identify.earliestDatestamp=[datetime stamp of earliest] (Required): Text to use as the Identify verb's earliestDatestamp value. 
#Identify.deletedRecord=[no|transient|persistent] (Required): Text to use as the Identify verb's deletedRecord value. 
#Identify.description.[0-9]*=[xml fragment] (Optional; Repeatable): XML fragments (<description>) to include in the Identify verb's response. 
#Crosswalks.[metadataPrefix]=[package.classname] (Required; Repeatable): Java class(es) that implement the ORG.oclc.oai.server.crosswalk.Crosswalk class. 
#ExtensionVerbs.[verb name]=[package.classname] (Optional; Repeatable): Java class(es) that extend the ORG.oclc.oai.server.verb.ServerVerb class. This allow you to easily create new verbs to perform application functions beyond the set of OAI verbs. These verbs can be accessed by adding "/extension" to the baseURL.
AbstractCatalog.oaiCatalogClassName=astrogrid.registry.oai.XMLExistOAICatalog
AbstractCatalog.recordFactoryClassName=astrogrid.registry.oai.XMLExistRecordFactory
AbstractCatalog.secondsToLive=600
AbstractCatalog.granularity=YYYY-MM-DDThh:mm:ssZ
Crosswalks.ivo_vor=astrogrid.registry.oai.XML2ivo_vrCrosswalk
OAIHandler.debug=false
Identify.deletedRecord=persistent