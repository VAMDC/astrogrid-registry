<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id: CEABase.xsd,v 1.4 2008/10/08 13:53:32 pah Exp $ -->
<!-- This schema represents the first ivoa level release of the CEA defintion schema that was previously internal to Astrogrid.
This is refactored from the AGParameterDefinition.xsd and CEABase.xsd schema files, to conform to the Registry v1.0 standards and styles.
In addition there are extensions to the original Astrogrid schema

* array valued parameters are introduced
* parameter groups are possible in an interface definition
* conditional parameter groups
* parameter ranges

Paul Harrison (ESO) - May 2007
-->
<xs:schema xmlns:ceab="http://www.ivoa.net/xml/CEA/base/v1.1"
   xmlns:xs="http://www.w3.org/2001/XMLSchema"
   xmlns:vr="http://www.ivoa.net/xml/VOResource/v1.0"
   xmlns:vs="http://www.ivoa.net/xml/VODataService/v1.1"
   targetNamespace="http://www.ivoa.net/xml/CEA/base/v1.1"
   elementFormDefault="unqualified" attributeFormDefault="unqualified"
   version="1.0 RC$Revision: 1.4 $">
   <xs:import namespace="http://www.ivoa.net/xml/VOResource/v1.0"
      schemaLocation="../../../vo-resource-types/VOResource/v1.0/VOResource.xsd" />
   <xs:import namespace="http://www.ivoa.net/xml/VODataService/v1.1"
      schemaLocation="../../../vo-resource-types/VODataService/v1.1/VODataService-v1.1-tables-proposal-2.xsd" />
   <xs:annotation>
      <xs:documentation>
         A group where only one of the members is active at any one time
         - equivalent to the same construct in HTML
      </xs:documentation>
   </xs:annotation>
   <xs:complexType name="ApplicationBase" abstract="false"
      mixed="false">
      <xs:annotation>
         <xs:documentation>
            The base application description
         </xs:documentation>
      </xs:annotation>
      <xs:sequence>
         <xs:element name="applicationType" type="ceab:ApplicationKind"
            minOccurs="1" maxOccurs="unbounded">
            <xs:annotation>
               <xs:documentation>
                  The CEA type of the application - this allows the
                  system to determine which CEC it should be talking to.
               </xs:documentation>
            </xs:annotation>
         </xs:element>
         <xs:element name="parameters"
            type="ceab:ParameterDefinitionList">
            <xs:annotation>
               <xs:documentation>
                  The complete list of parameters that might occur in
                  any of the apllication interfaces
               </xs:documentation>
            </xs:annotation>
         </xs:element>
         <xs:element name="interfaces"
            type="ceab:InterfaceDefinitionList">
            <xs:annotation>
               <xs:documentation>
                  The list of interfaces that an application might have
               </xs:documentation>
            </xs:annotation>
         </xs:element>
      </xs:sequence>
      
   </xs:complexType>
   <!-- perhpas add a name to interfaceDefinition as well - the ID might be not very human readable. -->
   <xs:complexType name="InterfaceDefinition" mixed="false">
      <xs:annotation>
         <xs:documentation>
            description of an interface
         </xs:documentation>
      </xs:annotation>
      <xs:sequence>
         <xs:element name="constants" type="ceab:InterfaceConstants"
            minOccurs="0">
            <xs:annotation>
               <xs:documentation>
                  parameters that are always passed to the application -
                  these are not presented to the user, but the server
                  side of the CEA will pick them up and send to the
                  application. *EDitor note* perhaps this should be only
                  an implementation detail.
               </xs:documentation>
            </xs:annotation>
         </xs:element>
         <xs:element name="input"
            type="ceab:InputParameterReferenceSpecification">
            <xs:annotation>
               <xs:documentation>
                  The list of input parameters for an interface
               </xs:documentation>
            </xs:annotation>
         </xs:element>
         <xs:element name="output"
            type="ceab:OutputParameterReferenceSpecification">
            <xs:annotation>
               <xs:documentation>
                  The list of output parameters for an interface
               </xs:documentation>
            </xs:annotation>
         </xs:element>
         <xs:element name="description" type="xs:string"
            minOccurs="0">
            <xs:annotation>
               <xs:documentation>
                  A description of the interface suitable for
                  presentation in a UI
               </xs:documentation>
            </xs:annotation>
         </xs:element>
      </xs:sequence>
      <xs:attribute name="id" type="xs:string" use="required" >
         <xs:annotation>
            <xs:documentation>
               the identifier for the interface
            </xs:documentation>
         </xs:annotation></xs:attribute>
      <xs:attribute name="name" type="xs:string" use="optional" >
         <xs:annotation>
            <xs:documentation>
               a name for the interface to displace in UI
            </xs:documentation>
         </xs:annotation></xs:attribute>
   </xs:complexType>
   <xs:complexType name="InterfaceDefinitionList">
        <xs:annotation>
           <xs:documentation>
              A list of interface definitions
           </xs:documentation>
        </xs:annotation>
        <xs:sequence>
         <xs:element name="interfaceDefinition"
            type="ceab:InterfaceDefinition" maxOccurs="unbounded">
            <xs:annotation>
               <xs:documentation>
                  A particular application interface
               </xs:documentation>
            </xs:annotation>
         </xs:element>
      </xs:sequence>
   </xs:complexType>
   <xs:complexType name="ParameterRef" mixed="false">
      <xs:annotation>
         <xs:documentation>
            reference to an application parameter. Used in the interface
            definitions.
         </xs:documentation>
      </xs:annotation>
      <xs:attributeGroup ref="ceab:ParameterReferenceAttributes" />            
      <xs:attributeGroup ref="ceab:cardinality" />
   </xs:complexType>
   <xs:attributeGroup name="cardinality">
      <xs:annotation>
         <xs:documentation>
            attributes for specifiying how often a parameter or
            parameter group should occur
         </xs:documentation>
      </xs:annotation>
      <xs:attribute name="minOccurs" type="xs:int" use="optional"
         default="1" />
      <xs:attribute name="maxOccurs" type="xs:int" use="optional"
         default="1">
         <xs:annotation>
            <xs:documentation>
               a value of 0 implies unbounded
            </xs:documentation>
         </xs:annotation>
      </xs:attribute>
   </xs:attributeGroup>
   <xs:simpleType name="ApplicationKind"> <!-- better to replace this with open list of tags... -->
      <xs:annotation>
         <xs:documentation>
            The kind of CEA application. This mostly affects how a service implementing the application should be discovered.
         </xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:string">
         <xs:enumeration value="processing">
            <xs:annotation>
               <xs:documentation>
                  The application is a data processing application. This means that all instances of sevrvices that can run the application are deemed to be equivalent. An example of a class of such application are the Astrogrid legacy commandline application wrapping services.
               </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="http">
            <xs:annotation>
               <xs:documentation>
                  application is a legacy http form style POST/GET that has been wrapped by the CEA.
               </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="dataproducing">
            <xs:annotation>
               <xs:documentation>
                  the application produces data - it is not assumed that every instance of a server that can run the application will produced the same results - they might have different underlying data collections. Therefore the appropriate service has to be selected by reference to other metadata about the CEACapable service.
               </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="grid">
            <xs:annotation>
               <xs:documentation>
                  the application is a facade onto a grid computing system.
               </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
      </xs:restriction>
   </xs:simpleType>
   <xs:complexType name="InputParameterReferenceSpecification">
        <xs:annotation>
           <xs:documentation>
              The allowed structures for input parameters
           </xs:documentation>
        </xs:annotation>
        <xs:sequence minOccurs="0" maxOccurs="unbounded">
         <xs:group ref="ceab:ParameterReferenceGroup" />
      </xs:sequence>
   </xs:complexType>
   <xs:complexType name="OutputParameterReferenceSpecification">
      <xs:annotation>
         <xs:documentation>
            Allowed constructs for output parameters
         </xs:documentation>
         <xs:documentation>
            restricted to prefs at the moment - is there a case for
            pgroups...
         </xs:documentation>
      </xs:annotation>
      <xs:sequence>
         <xs:element name="pref" type="ceab:ParameterRef" minOccurs="0"
            maxOccurs="unbounded">
            <xs:annotation>
               <xs:documentation>
                  a reference to a parameter which has been defined in
                  the Parameters section of the application description.
                  This reference defines how many times the parameter
                  can occur in the particular interface. The content of
                  the element can define an interface dependent default
                  for the parameter?
               </xs:documentation>
            </xs:annotation>
         </xs:element>
      </xs:sequence>
   </xs:complexType>
   <xs:simpleType name="refToParameter">
      <xs:annotation>
         <xs:documentation>
            this type is used to make a reference to a parameter - it
            uses a standard string type rather than an idref because the
            integrity of the references is checked using xs:unique
            constraints within VOCEA.xsd.
         </xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:string" />
   </xs:simpleType>
   <xs:complexType name="ConditionalPgroupOption">
      <xs:annotation>
         <xs:documentation>
            this is the grouping of parameters that are required for a
            particular value of a head parameter
         </xs:documentation>
      </xs:annotation>
      <xs:sequence>
         <xs:element name="value" type="xs:string">
            <xs:annotation>
               <xs:documentation>
                  the value that the control parameter has for this
                  grouping
               </xs:documentation>
            </xs:annotation>
         </xs:element>
         <xs:group ref="ceab:ParameterReferenceGroup"
            maxOccurs="unbounded" />
      </xs:sequence>
      <xs:attribute name="name" type="xs:string">
         <xs:annotation>
            <xs:documentation>
               name for the particular ConditionalPgroup option - can be
               used in user interface to label the parameter group.
            </xs:documentation>
         </xs:annotation></xs:attribute>
   </xs:complexType>
   <xs:complexType name="ConditionalPgroup">
        <xs:annotation>
           <xs:documentation>
              A grouping of parameters, where the actual parameters that
              must be given is specified by the value of a controlling
              parameter.
           </xs:documentation>
        </xs:annotation>
        <xs:sequence>
         <xs:element name="cgroup" type="ceab:ConditionalPgroupOption"
            maxOccurs="unbounded" />
      </xs:sequence>
      <xs:attributeGroup ref="ceab:ParameterReferenceAttributes" />
   </xs:complexType>
   <xs:attributeGroup name="ParameterReferenceAttributes">
      <xs:annotation>
         <xs:documentation>
            the parameters that make up a standard reference to a
            parameter.
         </xs:documentation>
      </xs:annotation>
      <xs:attribute name="ref" type="ceab:refToParameter">
         <xs:annotation>
            <xs:documentation>
               reference to the parameter definition whose value
               determine which of the cgroups will be chosen
            </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="hidden" type="xs:boolean" default="false">
         <xs:annotation>
            <xs:documentation>
               a flag to allow a suggestion to the user interface that
               this parameter should normally be hidden from user view
               
               ed: note - what is the difference between saying parameter is hidden and specifying a constant in interface
            </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="name" type="xs:string"></xs:attribute>
   </xs:attributeGroup>
   <xs:complexType name="ParameterDefinitionList">
        <xs:annotation>
           <xs:documentation>
              A list of parameter definitions
           </xs:documentation>
        </xs:annotation>
        <xs:sequence>
         <xs:element name="parameterDefinition" type="ceab:BaseParameterDefinition" minOccurs="0"
            maxOccurs="unbounded" />
      </xs:sequence>
   </xs:complexType>
   <xs:complexType name="InterfaceConstants">
        <xs:annotation>
           <xs:documentation>
              Any constant values that should be assumed to be set for a
              particular interface by the CEA application - it should be
              an error if the CEA client tries to send a value for this
              parameter - the CEA server should assume the value.
           </xs:documentation>
        </xs:annotation>
        <xs:sequence>
           <xs:element name="pval" maxOccurs="unbounded"
              minOccurs="1"
           >
              <xs:complexType>
                 <xs:sequence>
                    <xs:element name="value" type="xs:string"></xs:element>
                 </xs:sequence>
                 <xs:attribute name="id" type="xs:string"></xs:attribute>
                 <xs:attribute name="indirect" type="xs:boolean"></xs:attribute>
              </xs:complexType>
           </xs:element>
        </xs:sequence>
   </xs:complexType>
   <xs:complexType name="PGroup">
      <xs:annotation>
         <xs:documentation>
            A grouping of several parameters - this can be done for
            several reasons 1. provides a group that must be repeated 2.
            can be used as a visual hint to any applications that use
            the group.
         </xs:documentation>
         <!-- perhaps some futher hints as to the intention of the PGroup could be given - e.g. should it be presented as a table-like structure in UI (when the maxOccurs is > 1) - perhaps PGroups should also have identifiers-->
      </xs:annotation>
      <xs:sequence>
         <xs:group ref="ceab:ParameterReferenceGroup"
            minOccurs="2" maxOccurs="unbounded" >
            <xs:annotation>
               <xs:documentation>
                  These are the elements that occur anywhere that there
                  is a parameter reference possible in an interface. -
                  should this be a minimum of 2?
               </xs:documentation>
            </xs:annotation></xs:group>
      </xs:sequence>
      <xs:attributeGroup ref="ceab:cardinality" />
      <xs:attribute name="name" type="xs:string" use="optional">
         <xs:annotation>
            <xs:documentation>
               this is a name for the pgroup that can be used by UI
               software
            </xs:documentation>
         </xs:annotation>
      </xs:attribute>
   </xs:complexType>
   <xs:complexType name="RadioPGroup">
      <xs:annotation>
         <xs:documentation>
            A grouping of several parameters - where only one should be active at any one time.
         </xs:documentation>
         <!-- perhaps some futher hints as to the intention of the PGroup could be given - e.g. should it be presented as a table-like structure in UI (when the maxOccurs is > 1) - perhaps PGroups should also have identifiers-->
      </xs:annotation>
      <xs:sequence>
         <xs:group ref="ceab:ParameterReferenceGroup"
            minOccurs="2" maxOccurs="unbounded" >
            <xs:annotation>
               <xs:documentation>
                  These are the elements that occur anywhere that there
                  is a parameter reference possible in an interface. -
                  should this be a minimum of 2?
               </xs:documentation>
            </xs:annotation></xs:group>
      </xs:sequence>
      <xs:attributeGroup ref="ceab:cardinality" />
      <xs:attribute name="name" type="xs:string" use="optional">
         <xs:annotation>
            <xs:documentation>
               this is a name for the pgroup that can be used by UI
               software
            </xs:documentation>
         </xs:annotation>
      </xs:attribute>
   </xs:complexType>
   <!-- the following used to be in CEAParameterDefinition
   -->
   <!-- This is the standard type -->
   <xs:simpleType name="ParameterTypes">
      <xs:annotation>
         <xs:documentation>
            The list of possible parameter types that are passed in CEA
            messages. Note that the formal schema type of the parameter
            value is always a string when passed to the web service -
            The types below are to indicate how that string should be
            interpreted. There is a mixture of classic atomic types as
            well as some aggregate types - this wide scope and slightly
            "fuzzy" definition of a parameter type is a deliberate
            design decision in CEA as it reflects the typical "objects"
            that are passed between astronomical applications
         </xs:documentation>
         <xs:documentation>
            As Data Models become established then references to these
            should also be made as top level aggregate types
         </xs:documentation>
         <xs:documentation>
            Note that some of the "bulkier" types - e.g. VOTable would
            normally be passed "by reference"
         </xs:documentation>
         <xs:documentation>
            Note that in a typical atomic parameter definition a UType
            would be specified so that a workflow builder might be able
            to automatically insert code to extract such a value from
            the bulk output of a previous step
         </xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:string">
         <xs:enumeration value="integer">
            <xs:annotation>
               <xs:documentation>Integer</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="real">
            <xs:annotation>
               <xs:documentation>Real</xs:documentation>
               <xs:documentation>
                  The string formats that can be recognised should be as
                  defined by FORTRAN? Java? C? (all?)
               </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="complex">
            <xs:annotation>
               <xs:documentation>A complex number</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="text">
            <xs:annotation>
               <xs:documentation>
                  Any string of characters
               </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="boolean">
            <xs:annotation>
               <xs:documentation>
                  A representation of a boolean - e.g. true/false on/off
               </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="anyURI">
            <xs:annotation>
               <xs:documentation>
                  Any Uniform Resource Indentifier
               </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="VOTable">
            <xs:annotation>
               <xs:documentation>
                  A VOTable in its entirety
               </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <!-- possibly remove this - can be signalled via UCD of a real type -->
         <xs:enumeration value="angle">
            <xs:annotation>
               <xs:documentation>
                  A value that is to be interpreted as an angular
                  coordinate measurement, e.g. RA, Dec
               </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="MJD">
            <xs:annotation>
               <xs:documentation>Modified Julian date</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="DateTime">
            <xs:annotation>
               <xs:documentation>
                  ISO Date representation
               </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="ADQL">
            <xs:annotation>
               <xs:documentation>
                  the full version of the Astronomical Data Query
                  Language
               </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="STC-S">
            <xs:annotation>
               <xs:documentation>
                  A value that is specified using the Space Time
                  Coordinate string definition
               </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="binary">
            <xs:annotation>
               <xs:documentation>
                  A general piece of binary data with no special
                  interpretation
               </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="FITS">
            <xs:annotation>
               <xs:documentation>
                  Data encoded in the Flexible Image Transport System
                  http://fits.gsfc.nasa.gov/iaufwg/iaufwg.html
               </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="XML">
            <xs:annotation>
               <xs:documentation>
                  The data are encoded as generic XML. The schema for
                  the xml is given in the UType?...
               </xs:documentation>
               <!-- 
                  it might be useful to have parameters specified as particular elements in an xml file -
                  perhaps one parameter could point to the file,and the other parameters would be references into that - this would probably be best done as an extension to the pref idea - the main pref would point to the "atomic" definitian and a new attributre could point to the 'bulk' parameter
               -->
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="Table">
         <xs:annotation><xs:documentation>Data formatted in a tabular fashion</xs:documentation></xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="Image"><xs:annotation><xs:documentation>An image</xs:documentation></xs:annotation></xs:enumeration>
         <xs:enumeration value="Spectrum"><xs:annotation><xs:documentation>A spectrum</xs:documentation></xs:annotation></xs:enumeration>
      </xs:restriction>
   </xs:simpleType>
   <xs:complexType name="tDocumentation" mixed="true">
      <xs:annotation>
         <xs:documentation>
            a type that allows any style of documentation content.
         </xs:documentation>
      </xs:annotation>
      <xs:sequence>
         <xs:any processContents="lax" minOccurs="0"
            maxOccurs="unbounded" />
      </xs:sequence>
   </xs:complexType>
   <xs:simpleType name="java-param">
      <xs:restriction base="xs:token">
         <xs:pattern value="[a-zA-Z][a-zA-Z0-9]*" />
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="java-class">
      <xs:restriction base="xs:token">
         <xs:pattern value="([a-zA-Z0-9]+\.)*[a-zA-Z][a-zA-Z0-9]*" />
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="java-package">
      <xs:restriction base="xs:token">
         <xs:pattern value="([a-zA-Z0-9]+\.)*[a-zA-Z0-9]*" />
      </xs:restriction>
   </xs:simpleType>
   <xs:complexType name="BaseParameterDefinition">
      <xs:annotation>
         <xs:documentation>
            The basic definition of what a parameter is - this is common
            to all of the CEA implementations.
         </xs:documentation>
      </xs:annotation>
      <xs:complexContent>
         <xs:extension base="vs:BaseParam">
            <xs:sequence>
               <!-- editor note - The UCD, UType, and MimeType are not all expected to be filled in for all parameters, but are there to give a workflow builder "hints" about the semantics of a particular parameter beyond the basic type attribute - 
                  this is rather fuzzy at the moment and it there is probably some overlap between the scopes of the elements, and certainly there is nothing stopping the user entering inconsistent information-->
               <xs:element name="UType" type="xs:string"
                  minOccurs="0">
                  <xs:annotation>
                     <xs:documentation>
                        possibility to specify a UType
                     </xs:documentation>
                  </xs:annotation>
               </xs:element>
               <xs:element name="mimeType" type="xs:string"
                  minOccurs="0">
                  <xs:annotation>
                     <xs:documentation>
                        possibility to specify a mime type this can be
                        overridden in the actual parameter passed
                     </xs:documentation>
                  </xs:annotation>
               </xs:element>
               <xs:element name="defaultValue" type="xs:string"
                  minOccurs="0" maxOccurs="unbounded">
                  <xs:annotation>
                     <xs:documentation>
                        a possible default for this type of parameter
                        this is repeateable for the case of array
                        parameters.
                     </xs:documentation>
                  </xs:annotation>
               </xs:element>
               <xs:choice minOccurs="0">
                  <xs:annotation>
                     <xs:documentation>
                        various ways of specifying the legal values that
                        a parameter might have editor note - does this
                        construct produce nice object models in code
                        generators, or would it be better to have an
                        abstract base type here..
                     </xs:documentation>
                  </xs:annotation>
                  <xs:element name="optionList"
                     type="ceab:OptionList">
                     <xs:annotation>
                        <xs:documentation>
                           For parameters that can only have one of a
                           list of values
                        </xs:documentation>
                     </xs:annotation>
                  </xs:element>
                  <xs:element name="range" type="ceab:Range">
                     <xs:annotation>
                        <xs:documentation>
                           captures the idea that a parameter can have a
                           range of values
                        </xs:documentation>
                     </xs:annotation>
                  </xs:element>
               </xs:choice>
            </xs:sequence>
            <xs:attribute name="id" type="xs:string" use="required" >
               <xs:annotation>
                  <xs:documentation>
                     the identifier for the parameter
                  </xs:documentation>
               </xs:annotation></xs:attribute>
            <xs:attribute name="type" type="ceab:ParameterTypes"
               use="required" >
               <xs:annotation>
                  <xs:documentation>
                     The data type of the parameter - note that this is
                     not restricted to atomic data types.
                  </xs:documentation>
               </xs:annotation></xs:attribute>
            <xs:attribute name="array" type="ceab:arrayDEF"
               use="optional" default="1">
               <xs:annotation>
                  <xs:documentation>
                     deffines the array shape of the parameter if it is an array
                  </xs:documentation>
               </xs:annotation>
            </xs:attribute>
         </xs:extension>
      </xs:complexContent>
      <!-- for the new derivation from DataService baseParam
         attribute name -> id
         element UI_NAME - uses base name 
         element description - uses base description
         units - base unit
         UCD - base ucd
      -->
   </xs:complexType>
   <xs:simpleType name="arrayDEF">
      <xs:annotation>
         <xs:documentation>
            taken from the votable definition - the first index varies
            most rapidy, and the last index may be specified as '*' to
            mean unbounded.
         </xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:token">
         <xs:pattern value="([0-9]+x)*[0-9]*[*]?(s\W)?" />
      </xs:restriction>
   </xs:simpleType>
   <!-- perhaps make this more like the VOTable option element -->
   <xs:complexType name="OptionList">
        <xs:annotation>
           <xs:documentation>
              A way of specifying that a parameter value should be taken
              from a list of possible values.
           </xs:documentation>
        </xs:annotation>
        <xs:sequence>
         <xs:element name="optionVal" type="ceab:OptionVal"
            maxOccurs="unbounded" >
            <xs:annotation>
               <xs:documentation>
                  a possible value for a value that forms part of a list
                  of values that a parameter could take.
               </xs:documentation>
            </xs:annotation></xs:element>
      </xs:sequence>
   </xs:complexType>
   <xs:complexType name="OptionVal" mixed="true">
      <xs:attribute name="displayValue" type="xs:string" use="optional"></xs:attribute>
   </xs:complexType>
   <xs:complexType name="RangeBound">
        <xs:annotation>
           <xs:documentation>
              the value of a range bound
           </xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
         <xs:extension base="xs:string">
            <xs:attribute name="inclusive" use="optional"
               type="xs:boolean" default="true">
            </xs:attribute>
          </xs:extension>
      </xs:simpleContent>
   </xs:complexType>
   <xs:complexType name="Range">
      <xs:annotation>
         <xs:documentation>
            used to specify that a parameter value should lie in a
            particular range.
         </xs:documentation>
      </xs:annotation>
      <xs:sequence>
         <xs:element name="min" type="ceab:RangeBound" minOccurs="0">
            <xs:annotation>
               <xs:documentation>
                  the maximum value in the range.
               </xs:documentation>
            </xs:annotation>
         </xs:element>
         <xs:element name="max" type="ceab:RangeBound" minOccurs="0">
            <xs:annotation>
               <xs:documentation>
                  the maximum value in the range.
               </xs:documentation>
            </xs:annotation>
         </xs:element>
      </xs:sequence>
      <!-- uswed to be a rangekind attribute - this is redundant -->
   </xs:complexType>
    <!-- the following used to be in CEAParameterDefinition
   -->
   <xs:group name="ParameterReferenceGroup">
      <xs:annotation>
         <xs:documentation>
            some form of reference to a parameter that would appear in
            an interface definition. This can either be a direct
            reference, a reference to a repeating group of parameters or
            a reference to a conditional group of parameters.
         </xs:documentation>
      </xs:annotation>
      <xs:choice>
         <xs:annotation>
            <xs:documentation>
               editor note - not too sure what the best multiplicities
               are here - this would typically be used in a case
            </xs:documentation>
         </xs:annotation>
         <xs:element name="pref" type="ceab:ParameterRef">
            <xs:annotation>
               <xs:documentation>
                  a reference to a parameter which has been defined in
                  the Parameters section of the application description.
                  This reference defines how many times the parameter
                  can occur in the particular interface. The content of
                  the element can define an interface dependent default
                  for the parameter?
               </xs:documentation>
            </xs:annotation>
         </xs:element>
         <xs:element name="pgroup" type="ceab:PGroup"
            maxOccurs="unbounded"
         >
            <xs:annotation>
               <xs:documentation>
                  a simple grouping of parameters. The parameters could
                  be grouped because they should be repeated as a group
                  or perhaps because they should appear together on a
                  single pane of the user interface.
               </xs:documentation>
            </xs:annotation>
         </xs:element>
         <xs:element name="cgroupHead" type="ceab:ConditionalPgroup"
            maxOccurs="unbounded"
         >
            <xs:annotation>
               <xs:documentation>
                  this represents a point in the parameter tree where
                  there could be a series of different sequences of
                  parameters based on the value of the parameter
                  referred to by this top level.
               </xs:documentation>
            </xs:annotation>
         </xs:element>
         <xs:element name="rgroup" type="ceab:RadioPGroup"></xs:element>
      </xs:choice>
   </xs:group>


 </xs:schema>
